{
    "contents" : "options(java.parameters=\"-Xmx2g\")   # optional, but more memory for Java helps\nlibrary(\"dfrtopics\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\nlibrary(\"lubridate\")\nlibrary(\"stringr\")\n\ndata_dir <- file.path(\"/home/sagun/GITHUB/topicmodelleR/data\")\nmetadata_file <- file.path(data_dir, \"citations.tsv\")\nmeta <- read_dfr_metadata(metadata_file)\n\ncounts <- read_wordcounts(list.files(file.path(data_dir, \"wordcounts\"),\n                                     full.names=T))\n\ncounts <- semi_join(counts,\n                    meta %>%\n                      select(id, pubdate) %>%\n                      filter(year(pubdate) != 1905),\n                    by=\"id\")\ncounts <- counts %>%\n  group_by(id) %>%\n  filter(sum(weight) > 300)\nstoplist_file <- file.path(path.package(\"dfrtopics\"), \"stoplist\",\n                           \"stoplist.txt\")\nstoplist <- readLines(stoplist_file)\ncounts %>%\n  group_by(id) %>%\n  summarize(total=sum(weight),\n            stopped=sum(weight[word %in% stoplist]))\n\ncounts <- counts %>% wordcounts_remove_stopwords(stoplist)\n\ncounts <- counts %>%\n  wordcounts_remove_rare(20000)\n\ncounts <- counts %>%\n  group_by(word) %>%\n  filter(sum(weight) > 3)\n\n# Stemming\n# library(\"SnowballC\")\n# counts <- counts %>%\n#   mutate(word=wordStem(word)\n\ndocs <- wordcounts_texts(counts)\nilist <- make_instances(docs)\nm <- train_model(ilist, n_topics=40,\n                 n_iters=300,\n                 seed=1066,       # \"reproducibility\"\n                 metadata=meta    # optional but handy later\n)\nwrite_mallet_model(m, \"modeling_results\")\nm <- load_mallet_model_directory(\"modeling_results\",\n                                 load_topic_words=T,\n                                 metadata_file=metadata_file)\nsummary(m)\ntopic_labels(m, n=5)\ndd <- top_docs(m, n=3) # n is the number of words to return for each topic\nhead(dd)\nids <- doc_ids(m)[dd$doc[dd$topic == 35]]\nmetadata(m) %>%\n  filter(id %in% ids) %>%\n  cite_articles()\n\nsrs <- topic_series(m, breaks=\"years\")\nhead(srs)\n\njournal <- factor(metadata(m)$journal)\ndoc_topics(m) %>%\n  sum_row_groups(journal) %>%\n  normalize_cols()\n\n# Visualization\ntop_words(m, n=10) %>%\n  plot_top_words(topic=3)\n\ntopic_scaled_2d(m, n_words=2000) %>%\n  plot_topic_scaled(labels=topic_labels(m, n=3))\n\ntheme_update(strip.text=element_text(size=7),  # optional graphics tweaking\n             axis.text=element_text(size=7))\ntopic_series(m) %>%\n  plot_series(labels=topic_labels(m, 2))\n\ntopic_report(m, \"plots\")\nexport_browser_data(m, \"browser\", download_dfb=T)\n\n# Word wise plotting\nw <- \"poem\"\nm <- load_sampling_state(m, simplified_state_file=file.path(\"modeling_results\", \"state.csv\"))\nsampling_state(m)\ndim(sampling_state(m))\n\ntopic_docs <- topic_docs_word(m, w)\ndoc_years <- metadata(m)$pubdate %>%\n  cut.Date(breaks=\"years\")\nseries <- sum_col_groups(topic_docs, doc_years)\ntotal_series <- t(doc_topics(m)) %>%\n  sum_col_groups(doc_years) %>%\n  colSums()\nseries <- series %>%\n  rescale_cols(1 / total_series)\nseries_frame <- series %>%\n  gather_matrix(col_names=c(\"topic\", \"year\", \"weight\"))\n\nseries_frame <- semi_join(series_frame,\n                          words_top_topics(m, 4) %>%\n                            filter(word == w),\n                          by=\"topic\")\n\nseries_frame %>%\n  mutate(topic=factor(topic_labels(m, 3)[topic])) %>% \n  mutate(year=as.Date(year)) %>%  # restore data type (sigh)\n  ggplot(aes(year, weight, group=topic, fill=topic)) +\n  geom_area() +\n  labs(x=\"year\",\n       y=\"fraction of corpus\",\n       title=str_c('allocation of \"', w, '\" among topics'))\n\nd <- read_diagnostics(file.path(\"modeling_results\", \"diagnostics.xml\"))\nwhich.min(d$topics$corpus_dist)\nsort(scale(d$topics$corpus_dist))[1:3]\n\n\n\n\n\n\n\n",
    "created" : 1456225494848.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3792934219",
    "id" : "F9E03A86",
    "lastKnownWriteTime" : 1456228808,
    "path" : "~/GITHUB/topicmodelleR/topics.R",
    "project_path" : "topics.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}